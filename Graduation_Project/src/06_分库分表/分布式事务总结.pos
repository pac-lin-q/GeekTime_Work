{"diagram":{"image":{"x":0,"width":200,"y":0,"pngdata":"iVBORw0KGgoAAAANSUhEUgAAAMgAAADICAYAAACtWK6eAAAACXBIWXMAAAsTAAALEwEAmpwYAAAAsUlEQVR4nO3BAQEAAACCIP+vbkhAAQAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB8GXHmAAFMgHIEAAAAAElFTkSuQmCC","height":200},"elements":{"leftChildren":[{"parent":"root","lineStyle":{"randomLineColor":"#80BC42"},"children":[{"parent":"0d37f6d6b039","children":[{"parent":"b01f4ccede5e","children":[],"id":"e144b7e00d25","title":"基本可用（Basically&nbsp;Available）保证分布式事务参与方不一定同时在线。"},{"parent":"b01f4ccede5e","children":[],"id":"702fcb1a152d","title":"柔性状态（Soft&nbsp;state）则允许系统状态更新有一定的延时，这个延时对客户来说不一定能够察觉。"},{"parent":"b01f4ccede5e","children":[],"id":"48b7708acb2b","title":"而最终一致性（Eventually&nbsp;consistent）通常是通过消息传递的方式保证系统的最终一致性。"}],"id":"b01f4ccede5e","title":"BASE&nbsp;是基本可用、柔性状态和最终一致性这三个要素的缩写"},{"parent":"0d37f6d6b039","children":[],"id":"181f689566f5","title":"柔性事务的理念：则是通过业务逻辑将互斥锁操作从资源层面上移至业务层面。通过放宽对强一致性要求，来换取系统吞吐量的提升"},{"parent":"0d37f6d6b039","children":[{"parent":"639a019a2518","children":[{"parent":"1ae5143e828d","children":[],"id":"b0ca36392f96","title":"TCC&nbsp;模式即将每个服务业务操作分为两个阶段，第一个阶段检查并预留相关资源，第二阶段根据所有<br>服务业务的&nbsp;Try&nbsp;状态来操作，如果都成功，则进行&nbsp;Confirm&nbsp;操作，如果任意一个&nbsp;Try&nbsp;发生错误，则全<br>部&nbsp;Cancel"},{"parent":"1ae5143e828d","children":[{"parent":"4d0ca14acd8d","children":[],"id":"ab44b8505f70","title":"准备操作&nbsp;Try：完成所有业务检查，预留必须的业务资源。"},{"parent":"4d0ca14acd8d","children":[],"id":"fd2609d1c25c","title":"确认操作&nbsp;Confirm：真正执行的业务逻辑，不做任何业务检查，只使用&nbsp;Try&nbsp;阶段预留的业务资源。因此，只要&nbsp;Try&nbsp;操作成功，Confirm&nbsp;必须能成功。另外，Confirm&nbsp;操作需满足幂等性，保证一笔分布式事务能且只能成功一次。"},{"parent":"4d0ca14acd8d","children":[],"id":"2bbe0d10e846","title":"取消操作&nbsp;Cancel：释放&nbsp;Try&nbsp;阶段预留的业务资源。同样的，Cancel&nbsp;操作也需要满足幂等性。"}],"id":"4d0ca14acd8d","title":"TCC&nbsp;使用要求就是业务接口都必须实现三段逻辑："},{"parent":"1ae5143e828d","children":[{"parent":"f06240d99c86","children":[],"id":"db4611268613","title":"TCC&nbsp;不依赖&nbsp;RM&nbsp;对分布式事务的支持，而是通过对业务逻辑的分解来实现分布式事务，不同于&nbsp;AT的是就是需要自行定义各个阶段的逻辑，对业务有侵入。"},{"parent":"f06240d99c86","image":{"w":469,"h":213,"url":"http://cdn2.processon.com/60db2b18e4b05cff2d70d141?e=1624979753&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:WbLeSvobMdcOgPF_6IPGZT8v0K0="},"children":[],"id":"f0eb922c039e","title":"过程"}],"id":"f06240d99c86","title":"TCC处理过程<br>"},{"parent":"1ae5143e828d","children":[{"parent":"27b6b7e3b511","children":[],"id":"a13d90f92d29","title":"允许空回滚"},{"parent":"27b6b7e3b511","children":[],"id":"b415f2add170","title":"防悬挂控制"},{"parent":"27b6b7e3b511","children":[],"id":"5485ebc9cb55","title":"幂等设计"}],"id":"27b6b7e3b511","title":"TCC&nbsp;需要注意的几个问题"}],"id":"1ae5143e828d","title":"TCC：通过手动补偿处理"},{"parent":"639a019a2518","children":[{"parent":"a8fef5ab8850","children":[],"id":"0067f8141b99","title":"AT&nbsp;模式就是两阶段提交，自动生成反向SQL"},{"parent":"a8fef5ab8850","image":{"w":541,"h":242,"url":"http://cdn2.processon.com/60db2bb2e4b05e98c69a630a?e=1624979907&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:iS-ZcSuAu5eXLDkfa0YZt3InCPQ="},"children":[],"id":"22bc34a79dd0","title":"子主题"}],"id":"a8fef5ab8850","title":"AT:通过自动补偿处理"},{"parent":"639a019a2518","children":[{"parent":"d8e608fd291f","children":[],"id":"b05f1dd25597","title":"Saga模式没有try阶段，直接提交事务"},{"parent":"d8e608fd291f","children":[],"id":"af25a663f138","title":"复杂情况下，对回滚操作的设计要求较高。"},{"parent":"d8e608fd291f","image":{"w":454,"h":212,"url":"http://cdn2.processon.com/60db2b5de4b091fd37114769?e=1624979821&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:rcaLT3lxKMV3pvXOje_YXy7on9Y="},"children":[],"id":"83c21cd09aad","title":"子主题"}],"id":"d8e608fd291f","title":"SAGA"},{"parent":"639a019a2518","children":[{"parent":"40efb5901a2d","children":[{"parent":"65ac966d7f68","children":[],"id":"750027ee2753","title":"Seata&nbsp;AT&nbsp;事务模型包含TM&nbsp;(事务管理器)，RM&nbsp;(资源管理器)&nbsp;和TC&nbsp;(事务协调器)。TC&nbsp;是一个独立部署的服务，TM&nbsp;和RM&nbsp;以jar&nbsp;包的方同业务应用一同部署，它们同TC&nbsp;建立长连接，在整个事务生命周期内，保持远程通信。TM&nbsp;是全局事务的发起方，负责全局事务的开启提交和回滚。RM&nbsp;是全局事务的参与者，负责分支事务的执行结果上报，并且通过TC&nbsp;的协调进行分支事务的提交和回滚。"},{"parent":"65ac966d7f68","children":[{"parent":"9a33c7e54053","children":[],"id":"02bd99968905","title":"TM&nbsp;要求TC&nbsp;开始一个全新的全局事务。"},{"parent":"9a33c7e54053","children":[],"id":"ebb29372a2ad","title":"TC&nbsp;生成一个代表该全局事务的XID。"},{"parent":"9a33c7e54053","children":[],"id":"ec7d1e10f038","title":"XID&nbsp;贯穿于微服务的整个调用链。"},{"parent":"9a33c7e54053","children":[],"id":"27241c37e730","title":"TM&nbsp;要求TC&nbsp;提交或回滚XID&nbsp;对应全局事务。"},{"parent":"9a33c7e54053","children":[],"id":"25ba968602a2","title":"TC&nbsp;驱动XID&nbsp;对应的全局事务下的所有分支事务完成提交或回滚。"},{"parent":"9a33c7e54053","image":{"w":420,"h":265,"url":"http://cdn2.processon.com/60db2c5de4b0596f983fbb7e?e=1624980077&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:fO8cHSFPrP-S2gNz7fnW7odtil8="},"children":[],"id":"e15b2aa80c25","title":"子主题"}],"id":"9a33c7e54053","title":"Seata&nbsp;管理的分布式事务的典型生命周期："},{"parent":"65ac966d7f68","children":[{"parent":"c6bd426f3454","image":{"w":430,"h":236,"url":"http://cdn2.processon.com/60db2cbde4b05e98c69a6514?e=1624980173&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:_1P5NL71GerEciq6FEnpX1HE57g="},"children":[],"id":"f0e5a485a239","title":"子主题"}],"id":"c6bd426f3454","title":"TCC"},{"parent":"65ac966d7f68","children":[{"parent":"27e52af9c10e","image":{"w":430,"h":315,"url":"http://cdn2.processon.com/60db2cd5e4b04d6cab0e7c2c?e=1624980197&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:1jmoc4M64wF8By_GmUykH-MZQ1U="},"children":[{"parent":"8c2849a9c5dc","children":[{"parent":"d2ae9bf3a997","children":[],"id":"66213a26aa2b","title":"一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和连接资源。<br>"},{"parent":"d2ae9bf3a997","children":[],"id":"44f8e513863d","title":"二阶段：提交异步化，非常快速地完成。回滚通过一阶段的回滚日志进行反向补偿。"}],"id":"d2ae9bf3a997","title":"两阶段提交协议的演变："}],"id":"8c2849a9c5dc","title":"子主题"}],"id":"27e52af9c10e","title":"AT"}],"id":"65ac966d7f68","title":"Seata"},{"parent":"40efb5901a2d","children":[{"parent":"49bda2cab941","children":[{"parent":"c6b9e8fed763","children":[],"id":"366c6ab3569e","title":"子主题"}],"id":"c6b9e8fed763","title":"Hmily是一个高性能分布式事务框架，开源于2017年，目前有2800个Star，基于TCC&nbsp;原理实现，使用Java语言开发（JDK1.8+），天然支持Dubbo、SpringCloud、<br>Motan等微服务框架的分布式事务。"},{"parent":"49bda2cab941","image":{"w":385,"h":463,"url":"http://cdn2.processon.com/60db2d3de4b04d6cab0e7c93?e=1624980302&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:I7QgCwocBlPns8Phe-72pUNHHYQ="},"children":[{"parent":"c816061a36e5","image":{"w":551,"h":376,"url":"http://cdn2.processon.com/60db2d69e4b05cff2d70d93b?e=1624980345&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:hxw4UdkhiZlVzIgX5O-hPQhSxzw="},"children":[],"id":"9e9004067885","title":""}],"id":"c816061a36e5","title":"原理"}],"id":"49bda2cab941","title":"hmily"},{"parent":"40efb5901a2d","children":[{"parent":"adb6dad6bccb","children":[{"parent":"d6caa83eea34","image":{"w":472,"h":269,"url":"http://cdn2.processon.com/60db2dcee4b0ef66445f9731?e=1624980446&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:Kn4GZ4sfxPumAg84IA5SXsY6yhY="},"children":[],"id":"ca376226cc33","title":""}],"id":"d6caa83eea34","title":"ShardingSphere支持XA事务的常见几个开源实现"},{"parent":"adb6dad6bccb","children":[{"parent":"a81777c71f05","image":{"w":484,"h":273,"url":"http://cdn2.processon.com/60db2da1e4b0596f983fc20c?e=1624980401&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:iczFi5Az0njtEKwXrSlyP-Nt9lg="},"children":[],"id":"e9b37c5c32fe","title":""}],"id":"a81777c71f05","title":"ShardingSphere支持Seata的柔性事务"}],"id":"adb6dad6bccb","title":"ShardingSphere对分布式事务的支持"}],"id":"40efb5901a2d","title":"分布式事务框架："}],"id":"639a019a2518","title":"BASE&nbsp;柔性事务常见模式"}],"id":"0d37f6d6b039","title":"弱一致性：BASE柔性事务"}],"children":[{"parent":"root","lineStyle":{"randomLineColor":"#127c97"},"children":[{"parent":"ccba3deffa57","children":[],"id":"4403621a6b49","title":"在分布式条件下，多节点操作保证数据的一致性<br>"},{"parent":"ccba3deffa57","children":[],"id":"dd702bf93c17","title":"可以说：将数据库端的事务迁移到服务端保证，确保数据的一致性"},{"parent":"ccba3deffa57","children":[{"parent":"243658600a94","children":[],"id":"78ae3fa36865","title":"一致性: XA&gt;TCC=SAGA&gt;事务消息<br>"},{"parent":"243658600a94","children":[],"id":"d2185b6cd78d","title":"业务友好性:XA&gt;事务消息&gt;SAGA&gt;TCC"},{"parent":"243658600a94","children":[],"id":"f43c25ccda1b","title":"性能损耗:XA&gt;TCC&gt;SAGA=事务消息"}],"id":"243658600a94","title":"事务机制解决方案对比<br>"}],"id":"ccba3deffa57","title":"描述"},{"parent":"root","lineStyle":{"randomLineColor":"rgb(51, 156, 168)"},"children":[{"parent":"639a053924df","children":[{"parent":"ae1c7cbf3365","children":[],"id":"502ee13551bb","title":"应用程序（Application Program）简称AP"},{"parent":"ae1c7cbf3365","children":[{"parent":"95b09844f22a","children":[],"id":"a41b52832005","title":"提供资源访问的方式"}],"id":"95b09844f22a","title":"资源管理器（Resource Manager）简称RM"},{"parent":"ae1c7cbf3365","children":[{"parent":"303807ded3a9","children":[],"id":"7325e10f1534","title":"负责分配事务唯一标识，监控事务执行进度，统一提交或回滚"}],"id":"303807ded3a9","title":"事务管理器（Transaction Manager）简称TM"},{"parent":"ae1c7cbf3365","children":[{"parent":"996abeeedabb","image":{"w":408,"h":172,"url":"http://cdn2.processon.com/60d53e2ae4b0be1b80063180?e=1624591418&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:d66k4SMHH4yceJ5Q1zypjIiLqvg="},"children":[],"id":"e4ec74c92b13","title":""}],"id":"996abeeedabb","title":"X/Open&nbsp;DTP模型与XA规范"}],"id":"ae1c7cbf3365","title":"协议"},{"parent":"639a053924df","children":[{"parent":"d833978ecba7","children":[],"id":"7c47873b286a","title":"xa_start&nbsp;：负责开启或者恢复一个事务分支<br>"},{"parent":"d833978ecba7","children":[],"id":"ca9cd5da70f9","title":"xa_end：负责取消当前线程与事务分支的关联"},{"parent":"d833978ecba7","children":[],"id":"54db6a71c178","title":"xa_prepare：询问RM&nbsp;是否准备好提交事务分支xa_commit：通知RM&nbsp;提交事务分支<br>"},{"parent":"d833978ecba7","children":[],"id":"a6d51b1988ae","title":"xa_rollback：通知RM&nbsp;回滚事务分支<br>"},{"parent":"d833978ecba7","children":[],"id":"9af361b97424","title":"xa_recover&nbsp;:&nbsp;需要恢复的XA&nbsp;事务<br>"},{"parent":"d833978ecba7","children":[{"parent":"233c4308a013","children":[],"id":"bfc21dd83b28","title":"XA事务有可以说是两阶段事务，可以以xa_prepare为界限分为两阶段<br>"}],"id":"233c4308a013","title":"小结："}],"id":"d833978ecba7","title":"XA接口"},{"parent":"639a053924df","children":[{"parent":"1a7989fa0023","children":[],"id":"1527310c1b56","title":"MySQL&nbsp;从5.0.3开始支持InnoDB引擎的XA分布式事务，MySQL&nbsp;Connector/J&nbsp;从5.0.0版本开始支持XA"},{"parent":"1a7989fa0023","children":[],"id":"803b05266027","title":"在DTP模型中，MySQL属于资源管理器（RM）。分布式事务中存在多个RM，由事务管理器TM来统一进行协调。"},{"parent":"1a7989fa0023","children":[],"id":"42ef8314f81c","title":"查看事务支持情况：show&nbsp;engins;"},{"parent":"1a7989fa0023","children":[{"parent":"73b3901f981f","children":[],"id":"9713423ff18a","title":"XA {START|BEGIN} XID [JION|RESUME] //开启事务，如果使用XA START&nbsp;启动不是使用XA BEGIN那边么不支持[JION|RESUME] xid未事务编号id，全局唯一"},{"parent":"73b3901f981f","children":[],"id":"298d55ccaaff","title":"XA END XID [SUSPEND [FOR MIGRATE]] //结束一个事务，不支持[SUSPEND&nbsp;[FOR&nbsp;MIGRATE]]"},{"parent":"73b3901f981f","children":[],"id":"53789693d20b","title":"XA PREPARE XID //准备提交"},{"parent":"73b3901f981f","children":[],"id":"1e42bba639d8","title":"XA COMMIT XID [ONE PHASE] //提交，如果设置了onephase标识一阶段提交，两阶段协议中如果只有一个RM参与，可以优化为一阶段提交"},{"parent":"73b3901f981f","children":[],"id":"0ee4cbe37ed3","title":"XA ROOLBACK XID //回滚"},{"parent":"73b3901f981f","children":[],"id":"9c27b54b85f2","title":"XA RECOVER [CONVERT XID] //列出所有处于prepare阶段的XA事务"},{"parent":"73b3901f981f","image":{"w":575,"h":337,"url":"http://cdn2.processon.com/60d5434fe4b0971a48c40d22?e=1624592735&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:OQGN5PtO5VyOCEZUa772i8-x0fk="},"children":[],"id":"c4cdbd3894dd","title":"相关状态"}],"id":"73b3901f981f","title":"相关操作命令"}],"id":"1a7989fa0023","title":"mysql对XA事务的支持"},{"parent":"639a053924df","image":{"w":556,"h":260,"url":"http://cdn2.processon.com/60d53fd0e4b091fd370992cc?e=1624591840&token=trhI0BY8QfVrIGn9nENop6JAc6l5nZuxhjQ62UfM:MMUpGVCfZCai8qdEJ_vMzN6vp98="},"children":[],"id":"fc3b76a7ddf6","title":"XA支持的框架，推荐Atomikos和narayana"},{"parent":"639a053924df","children":[{"parent":"52ab8958b450","children":[{"parent":"16b9cd53a78b","children":[],"id":"dc949c1103e8","title":"业务SQL执行过程，某个RM&nbsp;崩溃怎么处理？"},{"parent":"16b9cd53a78b","children":[],"id":"dc2a602ed7c0","title":"全部prepare后，某个RM&nbsp;崩溃怎么处理？"},{"parent":"16b9cd53a78b","children":[],"id":"ac6db58f4c45","title":"commit时，某个RM&nbsp;崩溃怎么办？"}],"id":"16b9cd53a78b","title":"XA过程中，事务失败怎么办？"},{"parent":"52ab8958b450","children":[{"parent":"dcf73d19c64e","children":[],"id":"fed82ad01d80","title":"全局事务内部包含了多个独立的事务分支，这一组事务分支要不都成功，要不都失败，各个事务分支的ACID特性共同构成了全局<br>事务的ACID特性。也就是将单个事务分支的支持的ACID特性提升一个层次（up&nbsp;a&nbsp;level）到分布式事务的范畴。即使在非分布式<br>事务中（即本地事务），如果对操作读很敏感，我们也需要将事务隔离级别设置为SERIALIZABLE。而对于分布式事务来说，更是<br>如此，可重复读隔离级别不足以保证分布式事务一致性。"}],"id":"dcf73d19c64e","title":"同步阻塞问题"},{"parent":"52ab8958b450","children":[{"parent":"0a64e2438962","children":[],"id":"d0667be93c04","title":"由于协调者的重要性，一旦协调者TM发生故障，参与者RM会一直阻塞下去，尤其在第二阶段，协调者发生故障，那么所有的参<br>与者还处于锁定事务资源的状态中，而无法继续完成事务操作。（如果协调者挂掉，可以重新选举一个协调者，但是无法解决因<br>为协调宕机导致的参与者处于阻塞状态的问题）。"}],"id":"0a64e2438962","title":"单点故障"},{"parent":"52ab8958b450","children":[{"parent":"232d447c6b07","children":[],"id":"50454e138830","title":"在二阶段提交的阶段二中，当协调者向参与者发功commit请求之后，发生了局部网络异常或者在发送commit请求过程中协调者<br>发生了故障，这回导致只有一部分参与者接收到了commit请求，而在这部分参与者接到commit请求之后就会执行commit操<br>作。但是其他部分未接到commit请求的机器则无法执行事务提交，于是整个分布式系统便出现了数据不一致的现象<br>"},{"parent":"232d447c6b07","children":[],"id":"d78e84e395b4","title":"极端情况下，一定有事务失败问题，需要监控和人工处理"}],"id":"232d447c6b07","title":"数据不一致"}],"id":"52ab8958b450","title":"相关问题总结："}],"id":"639a053924df","title":"强一致性：XA"}],"root":true,"theme":"mindmap","id":"root","title":"分布式事务","structure":"mind_free"}},"meta":{"exportTime":"2021-06-29 22:34:42","member":"","diagramInfo":{"creator":"","created":"","modified":"","title":"","category":""},"id":"","type":"ProcessOn Schema File","version":"1.0"}}